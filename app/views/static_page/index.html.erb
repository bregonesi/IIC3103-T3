<h1>Tarea 3 de Benjamin Regonesi</h1>

<div id="map" style="width:100%;height:400px;"></div>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCz_Wjb3L5lz-OcKNVlYZgILZN5fS1bL9Y"></script>
<script>
	var map;
	var bounds;
	var last_infowindow;
	var paths_map = new Array();
	var partial_paths_map = new Object();

	function initialize() {
	  map = new google.maps.Map(document.getElementById("map"), {});
	  bounds = new google.maps.LatLngBounds();
	}

	function addMarker(location, title="", info="", airport="") {
	  var marker = new google.maps.Marker({
	    position: location,
	    title: title,
	    map: map,
	    animation: google.maps.Animation.DROP
	  });

	  marker.addListener('click', function(e) {
	  	cleanPaths();
	  	cleanPartialPaths();
	  	toggleRoutesFrom(airport);
	  	selected_airport = airport;
		});

	  bounds.extend(marker.position);
	  map.fitBounds(bounds);

	  if(info != "") {
			var infowindow = new google.maps.InfoWindow({
				content: info
			});

			marker.addListener('click', function() {
				if(last_infowindow) {
					last_infowindow.close();
				}

				infowindow.open(map, marker);
				last_infowindow = infowindow;
			});
		}
	}

	function toggleRoutesFrom(airport) {
		Object.keys(flights).forEach(function(key, index) {
			var element = flights[key];
			//if(element["origin"] == airport || element["destination"] == airport) {
			if(element["origin"] == airport) {
				var points = new Array();

				points.push({lat: airports[element["origin"]]["position"][0], lng: airports[element["origin"]]["position"][1]});
				points.push({lat: airports[element["destination"]]["position"][0], lng: airports[element["destination"]]["position"][1]});
				addPath(points, "#000");
				addPartialPath(key);
			}
		});
	}

	function addPath(points, color) {
		var flightPath = new google.maps.Polyline({
			path: points,
			geodesic: true,
			strokeColor: color,
			strokeOpacity: 1.0,
			strokeWeight: 2
		});

		flightPath.setMap(map);
		paths_map.push(flightPath);
	}

	function cleanPaths() {
		while(element = paths_map.pop()) {
			element.setMap(null);
		}
	}

	function addPartialPath(airplane) {
		var flightPath = new google.maps.Polyline({
			path: positions[airplane],
			geodesic: true,
			strokeColor: "#F00",
			strokeOpacity: 1.0,
			strokeWeight: 2
		});

		flightPath.setMap(map);
		partial_paths_map[airplane] = flightPath;
	}

	function cleanPartialPaths() {
		Object.keys(partial_paths_map).forEach(function(key, index) {
			var element = partial_paths_map[key];
			element.setMap(null);
			delete partial_paths_map[key];
		});
	}

	function toggleAirplanesFrom(airport) {
		Object.keys(flights).forEach(function(key, index) {
			var element = flights[key];
			//if(element["origin"] == airport || element["destination"] == airport) {
			if(element["origin"] == airport) {
				var points = new Array();

				points.push({lat: airports[element["origin"]]["position"][0], lng: airports[element["origin"]]["position"][1]});
				points.push({lat: airports[element["destination"]]["position"][0], lng: airports[element["destination"]]["position"][1]});
				addPath(points, "000");
			}
		});
	}

	google.maps.event.addDomListener(window, 'load', initialize);
</script>


<script type="text/javascript">
	var socket = io('wss://integracion-tarea-3.herokuapp.com', { path: '/flights' });
	var airports = new Object();  // diccionario donde guardamos los aeropuertos
	var selected_airport;  // nos dice que aeropuerto esta seleccionado
	var flights = new Object();  // diccionario donde guardamos los flights
	var positions = new Object();  // diccionario donde guardamos las positions
	var flights_add = new Object();
	var positions_add = new Array();
	
	socket.emit('AIRPORTS');
	socket.emit('FLIGHTS');

	socket.on('AIRPORTS', function (data) {
		console.log("Evento de airports");
		// console.log(data);

		Object.keys(data).forEach(function(key, index) {
			if(typeof airports[key] == "undefined") {
				var element = data[key];

				airports[key] = {"name": element["name"], "city": element["city"], "country": element["country"],
												 "country_code": element["country_code"], "position": element["airport_position"]}
				console.log(element);


				var location = new google.maps.LatLng(element["airport_position"][0], element["airport_position"][1]);
				var info = element["name"] + " (" + key + ")<br/>" + element["city"] + ", " + element["country"] + " (" + element["country_code"] + ")";
				addMarker(location, element["name"], info, key);  // agregamos en el mapa
			}
		});

		addFlights();
	});

	socket.on('FLIGHTS', function (data) {
		console.log("Evento de flights");

		data.forEach(function(element) {
			if(typeof flights_add[element["code"]] != "undefined") {  // quizas algo fallo y no se agrego
				console.log("Volvemos a ejecutar add flights");

				addFlights();  // volvemos a intentar
			}

			if(typeof flights[element["code"]] == "undefined" && typeof flights_add[element["code"]] == "undefined") {
				console.log("Agregando nuevo flight");
				console.log(element);

				var airport_origen = element["destination"]["airport_code"];
				var airport_destino = element["origin"]["airport_code"];

				var flight = {"airline": element["airline"], "origin": airport_origen, "destination": airport_destino,
											"plane": element["plane"], "seats": element["seats"]};

				flights_add[element["code"]] = flight;
				addFlights();
			}
		});
	});

	socket.on('POSITION', function (data) {
		console.log("Evento de position");

		positions_add.push(data);
		addPositions();
	});
	/* End del socket (receive) */


	/* Funciones para iterar */
	function addFlights() {
		console.log("Funcion de add flights");

		Object.keys(flights_add).forEach(function(key, index) {
			var element = flights_add[key];

			console.log("key: " + key + " origin: " + element);

			if(typeof airports[element["origin"]] == "undefined" || typeof airports[element["destination"]] == "undefined") {  // si no estan los airports mandamos solicitud
				socket.emit('AIRPORTS');
			} else {
				console.log("Agregando flight");

				flights[key] = element;
				// agregamos en el mapa
				delete flights_add[key];  // con esto eliminamos

				addPositions();  // volvemos a agregar las posiciones pendientes
			}
		});
	}

	function addPositions() {
		console.log("Funcion de add positions");

		positions_add.forEach(function(element, index, object) {
			console.log(element);

			if(typeof flights[element["code"]] == "undefined") {
				socket.emit('FLIGHTS');
			} else {
				if(typeof positions[element["code"]] == "undefined") {
					positions[element["code"]] = new Array();  // guardaremos las posiciones
				}
				positions[element["code"]].push({lat: element["position"][0], lng: element["position"][1]});
				// agregamos en el mapa
				if(selected_airport == flights[element["code"]]["origin"]) {
					console.log("agregamos partial path");
					//addPartialPath(element["code"]);
				}

				object.splice(index, 1);  // con esto eliminamos
			}
		});
	}
</script>
